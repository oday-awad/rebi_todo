// GENERATED BY HAND to avoid build_runner. Provides Hive adapter for TaskHiveModel.
part of 'task_hive_model.dart';

class TaskHiveModelAdapter extends TypeAdapter<TaskHiveModel> {
  @override
  final int typeId = 1;

  @override
  TaskHiveModel read(BinaryReader reader) {
    final numOfFields = reader.readByte();
    final fields = <int, dynamic>{
      for (int i = 0; i < numOfFields; i++) reader.readByte(): reader.read(),
    };

    // Helper to coerce dynamic to String safely
    String _asString(dynamic v, {String fallback = ''}) {
      if (v == null) return fallback;
      if (v is String) return v;
      return v.toString();
    }

    // Newer schema (7 fields): adds 6=isArchived (bool)
    if (numOfFields >= 7 || fields.containsKey(6)) {
      return TaskHiveModel(
        id: _asString(fields[0]),
        listId: _asString(fields[1], fallback: 'default'),
        title: _asString(fields[2]),
        description: fields[3] as String?,
        isDone: (fields[4] as bool?) ?? false,
        createdAt: fields[5] as DateTime,
        isArchived: (fields[6] as bool?) ?? false,
      );
    }

    // New schema (6 fields): 0=id, 1=listId, 2=title, 3=description, 4=isDone, 5=createdAt
    if (numOfFields >= 6 || fields.containsKey(5)) {
      return TaskHiveModel(
        id: _asString(fields[0]),
        listId: _asString(fields[1], fallback: 'default'),
        title: _asString(fields[2]),
        description: fields[3] as String?,
        isDone: (fields[4] as bool?) ?? false,
        createdAt: fields[5] as DateTime,
        isArchived: false,
      );
    }

    // Backward-compat: old schema (5 fields): 0=id, 1=title, 2=description, 3=isDone, 4=createdAt
    return TaskHiveModel(
      id: _asString(fields[0]),
      listId: 'default',
      title: _asString(fields[1]),
      description: fields[2] as String?,
      isDone: (fields[3] as bool?) ?? false,
      createdAt: fields[4] as DateTime,
    );
  }

  @override
  void write(BinaryWriter writer, TaskHiveModel obj) {
    writer
      ..writeByte(7)
      ..writeByte(0)
      ..write(obj.id)
      ..writeByte(1)
      ..write(obj.listId)
      ..writeByte(2)
      ..write(obj.title)
      ..writeByte(3)
      ..write(obj.description)
      ..writeByte(4)
      ..write(obj.isDone)
      ..writeByte(5)
      ..write(obj.createdAt)
      ..writeByte(6)
      ..write(obj.isArchived);
  }
}
